-- debug.lua
--
-- Shows how to use the DAP plugin to debug your code.
--
-- Primarily focused on configuring the debugger for Go, but can
-- be extended to other languages as well. That's why it's called
-- kickstart.nvim and not kitchen-sink.nvim ;)

local debuggers = require 'custom.config.debuggers'

-- return {
--   -- NOTE: Yes, you can install new plugins here!
--   'mfussenegger/nvim-dap',
--   -- lazy = true,
--   -- NOTE: And you can specify dependencies as well
--   dependencies = {
--     -- Creates a beautiful debugger UI
--     'rcarriga/nvim-dap-ui',
--
--     -- Installs the debug adapters for you
--     'williamboman/mason.nvim',
--     'jay-babu/mason-nvim-dap.nvim',
--
--     -- Add your own debuggers here
--     'leoluz/nvim-dap-go',
--     'mxsdev/nvim-dap-vscode-js',
--     {
--       'microsoft/vscode-js-debug',
--       version = '1.x',
--       build = 'npm install --legacy-peer-deps && npx gulp vsDebugServerBundle && mv dist out',
--     },
--   },
--   config = function()
--     require('mason-nvim-dap').setup {
--       -- Makes a best effort to setup the various debuggers with
--       -- reasonable debug configurations
--       automatic_setup = true,
--
--       -- You can provide additional configuration to the handlers,
--       -- see mason-nvim-dap README for more information
--       handlers = {
--         function(config)
--           -- all sources with no handler get passed here
--
--           -- Keep original functionality
--           require('mason-nvim-dap').default_setup(config)
--         end,
--       },
--
--       -- You'll need to check that you have the required things installed
--       -- online, please don't ask me how to install them :)
--       ensure_installed = debuggers,
--     }
--
--     local dap = require 'dap'
--     -- Basic debugging keymaps, feel free to change to your liking!
--     vim.keymap.set('n', '<F5>', dap.continue, { desc = 'Debug: Start/Continue' })
--     vim.keymap.set('n', '<F1>', dap.step_into, { desc = 'Debug: Step Into' })
--     vim.keymap.set('n', '<F2>', dap.step_over, { desc = 'Debug: Step Over' })
--     vim.keymap.set('n', '<F3>', dap.step_out, { desc = 'Debug: Step Out' })
--     vim.keymap.set('n', '<leader>b', dap.toggle_breakpoint, { desc = 'Debug: Toggle Breakpoint' })
--     vim.keymap.set('n', '<leader>B', function()
--       dap.set_breakpoint(vim.fn.input 'Breakpoint condition: ')
--     end, { desc = 'Debug: Set Breakpoint' })
--
--     -- Install golang specific config
--     require('dap-go').setup()
--
--     -- js specific config
--     require('dap-vscode-js').setup {
--       debugger_path = vim.fn.stdpath 'data' .. '/lazy/vscode-js-debug',
--       adapters = { 'pwa-node', 'pwa-chrome', 'pwa-msedge', 'node-terminal', 'pwa-extensionHost' },
--     }
--     for _, language in ipairs { 'typescript', 'javascript' } do
--       require('dap').configurations[language] = {
--         -- config goes here
--         -- attach to a node process that has been started with
--         -- `--inspect` for longrunning tasks or `--inspect-brk` for short tasks
--         -- npm script -> `node --inspect-brk ./node_modules/.bin/vite dev`
--         {
--           -- use nvim-dap-vscode-js's pwa-node debug adapter
--           type = 'pwa-node',
--           -- attach to an already running node process with --inspect flag
--           -- default port: 9222
--           request = 'attach',
--           -- allows us to pick the process using a picker
--           processId = require('dap.utils').pick_process,
--           -- name of the debug action you have to select for this config
--           name = 'Attach debugger to existing `node --inspect` process',
--           -- for compiled languages like TypeScript or Svelte.js
--           sourceMaps = true,
--           -- resolve source maps in nested locations while ignoring node_modules
--           resolveSourceMapLocations = {
--             '${workspaceFolder}/**',
--             '!**/node_modules/**',
--           },
--           -- path to src in vite based projects (and most other projects as well)
--           cwd = '${workspaceFolder}/src',
--           -- we don't want to debug code inside node_modules, so skip it!
--           skipFiles = { '${workspaceFolder}/node_modules/**/*.js' },
--         },
--         {
--           type = 'pwa-chrome',
--           name = 'Launch Chrome to debug client',
--           request = 'launch',
--           url = 'http://localhost:5173',
--           sourceMaps = true,
--           protocol = 'inspector',
--           port = 9222,
--           webRoot = '${workspaceFolder}/src',
--           -- skip files from vite's hmr
--           skipFiles = { '**/node_modules/**/*', '**/@vite/*', '**/src/client/*', '**/src/*' },
--         },
--         -- only if language is javascript, offer this debug action
--         language == 'javascript'
--             and {
--               -- use nvim-dap-vscode-js's pwa-node debug adapter
--               type = 'pwa-node',
--               -- launch a new process to attach the debugger to
--               request = 'launch',
--               -- name of the debug action you have to select for this config
--               name = 'Launch file in new node process',
--               -- launch current file
--               program = '${file}',
--               cwd = '${workspaceFolder}',
--             }
--           or nil,
--       }
--     end
--
--     -- Dap UI setup
--     local dapui = require 'dapui'
--     -- For more information, see |:help nvim-dap-ui|
--     dapui.setup {
--       -- Set icons to characters that are more likely to work in every terminal.
--       --    Feel free to remove or use ones that you like more! :)
--       --    Don't feel like these are good choices.
--       icons = { expanded = '▾', collapsed = '▸', current_frame = '*' },
--       controls = {
--         icons = {
--           pause = '⏸',
--           play = '▶',
--           step_into = '⏎',
--           step_over = '⏭',
--           step_out = '⏮',
--           step_back = 'b',
--           run_last = '▶▶',
--           terminate = '⏹',
--           disconnect = '⏏',
--         },
--       },
--     }
--
--     -- Toggle to see last session result. Without this, you can't see session output in case of unhandled exception.
--     vim.keymap.set('n', '<F7>', dapui.toggle, { desc = 'Debug: See last session result.' })
--
--     dap.listeners.after.event_initialized['dapui_config'] = dapui.open
--     dap.listeners.before.event_terminated['dapui_config'] = dapui.close
--     dap.listeners.before.event_exited['dapui_config'] = dapui.close
--   end,
-- }
-- return {
--   'mfussenegger/nvim-dap',
--   dependencies = {
--     'rcarriga/nvim-dap-ui',
--     'mxsdev/nvim-dap-vscode-js',
--     -- build debugger from source
--     {
--       'microsoft/vscode-js-debug',
--       version = '1.x',
--       build = 'npm i && npm run compile vsDebugServerBundle && rm -rf out && mv dist out',
--     },
--   },
--   enabled = false,
--   config = function()
--     require('dap-vscode-js').setup {
--       debugger_path = vim.fn.stdpath 'data' .. '/lazy/vscode-js-debug',
--       adapters = { 'pwa-node', 'pwa-chrome', 'pwa-msedge', 'node-terminal', 'pwa-extensionHost' },
--     }
--
--     for _, language in ipairs { 'typescript', 'javascript', 'svelte' } do
--       require('dap').configurations[language] = {
--         -- attach to a node process that has been started with
--         -- `--inspect` for longrunning tasks or `--inspect-brk` for short tasks
--         -- npm script -> `node --inspect-brk ./node_modules/.bin/vite dev`
--         {
--           -- use nvim-dap-vscode-js's pwa-node debug adapter
--           type = 'pwa-node',
--           -- attach to an already running node process with --inspect flag
--           -- default port: 9222
--           request = 'attach',
--           -- allows us to pick the process using a picker
--           processId = require('dap.utils').pick_process,
--           -- name of the debug action you have to select for this config
--           name = 'Attach debugger to existing `node --inspect` process',
--           -- for compiled languages like TypeScript or Svelte.js
--           sourceMaps = true,
--           -- resolve source maps in nested locations while ignoring node_modules
--           resolveSourceMapLocations = {
--             '${workspaceFolder}/**',
--             '!**/node_modules/**',
--           },
--           -- path to src in vite based projects (and most other projects as well)
--           cwd = '${workspaceFolder}/src',
--           -- we don't want to debug code inside node_modules, so skip it!
--           skipFiles = { '${workspaceFolder}/node_modules/**/*.js' },
--         },
--         {
--           type = 'pwa-chrome',
--           name = 'Launch Chrome to debug client',
--           request = 'launch',
--           url = 'http://localhost:5173',
--           sourceMaps = true,
--           protocol = 'inspector',
--           port = 9222,
--           webRoot = '${workspaceFolder}/src',
--           -- skip files from vite's hmr
--           skipFiles = { '**/node_modules/**/*', '**/@vite/*', '**/src/client/*', '**/src/*' },
--         },
--         -- only if language is javascript, offer this debug action
--         language == 'javascript'
--             and {
--               -- use nvim-dap-vscode-js's pwa-node debug adapter
--               type = 'pwa-node',
--               -- launch a new process to attach the debugger to
--               request = 'launch',
--               -- name of the debug action you have to select for this config
--               name = 'Launch file in new node process',
--               -- launch current file
--               program = '${file}',
--               cwd = '${workspaceFolder}',
--             }
--           or nil,
--       }
--     end
--
--     local dap, dapui = require 'dap', require 'dapui'
--     -- Basic debugging keymaps, feel free to change to your liking!
--     vim.keymap.set('n', '<F5>', dap.continue, { desc = 'Debug: Start/Continue' })
--     vim.keymap.set('n', '<F1>', dap.step_into, { desc = 'Debug: Step Into' })
--     vim.keymap.set('n', '<F2>', dap.step_over, { desc = 'Debug: Step Over' })
--     vim.keymap.set('n', '<F3>', dap.step_out, { desc = 'Debug: Step Out' })
--     vim.keymap.set('n', '<leader>b', dap.toggle_breakpoint, { desc = 'Debug: Toggle Breakpoint' })
--     vim.keymap.set('n', '<leader>B', function()
--       dap.set_breakpoint(vim.fn.input 'Breakpoint condition: ')
--     end, { desc = 'Debug: Set Breakpoint' })
--
--     dapui.setup()
--     dap.listeners.after.event_initialized['dapui_config'] = function()
--       dapui.open { reset = true }
--     end
--     dap.listeners.before.event_terminated['dapui_config'] = dapui.close
--     dap.listeners.before.event_exited['dapui_config'] = dapui.close
--     -- Toggle to see last session result. Without this, you can't see session output in case of unhandled exception.
--     vim.keymap.set('n', '<F7>', dapui.toggle, { desc = 'Debug: See last session result.' })
--   end,
-- }
